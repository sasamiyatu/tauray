#version 460
#extension GL_GOOGLE_include_directive : enable
#include "svgf.glsl"
#include "projection.glsl"
#include "gbuffer.glsl"
#include "color.glsl"

#include "scene.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, set = 0, rgba32f) uniform readonly image2DArray in_color;
layout(binding = 1, set = 0, rg16_snorm) uniform readonly image2DArray in_normal;
layout(binding = 2, set = 0, rgba16f) uniform readonly image2DArray in_albedo;
layout(binding = 3, set = 0, rg16_snorm) uniform readonly image2DArray previous_normal;
layout(binding = 4, set = 0, rg32f) uniform readonly image2DArray in_screen_motion;
layout(binding = 5, set = 0, rgba32f) uniform readonly image2DArray previous_color;
layout(binding = 6, set = 0, rgba32f) uniform image2DArray out_color;
layout(binding = 7, set = 0, rgba32f) uniform readonly image2DArray in_linear_depth;
layout(binding = 8, set = 0, rgba32f) uniform readonly image2DArray previous_linear_depth;
layout(binding = 9, set = 0, rgba32f) uniform readonly image2DArray previous_moments;
layout(binding = 10, set = 0, rgba32f) uniform image2DArray out_moments;
layout(binding = 11, set = 0, rgba32f) uniform readonly image2DArray in_diffuse;
layout(binding = 12, set = 0, rgba32f) uniform readonly image2DArray previous_specular;
layout(binding = 13, set = 0, rgba32f) uniform image2DArray out_specular;
layout(binding = 14) buffer jitter_info_buffer
{
    vec4 jitter[];
} jitter_info;

bool temporal_reprojection_is_valid(ivec3 p, float z, float prev_z, vec3 normal, vec3 prev_normal, float motion_z)
{
    if (any(greaterThanEqual(p.xy, control.size)) || any(lessThan(p.xy, ivec2(0))))
        return false;

    if (isnan(z) || isnan(prev_z))
        return false;

    if (abs(prev_z - motion_z) / z > 0.05)
        return false;

    if (dot(normal, prev_normal) < 0.5)
        return false;

    return true;
}

void main()
{
    const ivec3 p = ivec3(gl_GlobalInvocationID.xyz);
    if(all(lessThan(p.xy, control.size)))
    {
        vec4 jitter_history = jitter_info.jitter[p.z];
        vec2 cur_jitter = jitter_history.xy;
        vec2 prev_jitter = jitter_history.zw;

        vec4 full_motion = imageLoad(in_screen_motion, p);
        vec2 motion = full_motion.xy;
        // Remove jitter caused by TAA
        motion -= (cur_jitter - prev_jitter)*0.5f;
        motion.y = 1.f - motion.y;
        motion = motion * vec2(control.size)- vec2(0.5);

        vec3 normal = unpack_gbuffer_normal(imageLoad(in_normal, p).rg);
        vec4 depth = imageLoad(in_linear_depth, p);
        vec4 prev_color = vec4(0.0);
        vec4 prev_diffuse = vec4(0.0);
        vec4 prev_specular = vec4(0.0);
        vec3 prev_moments = vec3(0.0);
        float history_length = 0.0;

        // Find valid samples
        const ivec2 offsets[4] = {ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1)};
        float x = fract(motion.x);
        float y = fract(motion.y);
        const float weights[4] = {(1.0 - x) * (1.0 - y),
                                         x  * (1.0 - y),
                                  (1.0 - x) *         y,
                                  x         *         y};
        float sum_w = 0.f;
        float sum_w_spec = 0.f;

        for (int i = 0; i < 4; ++i)
        {
            ivec3 q = ivec3(floor(motion), p.z);
            q.xy += offsets[i];
            vec3 prev_normal = unpack_gbuffer_normal(imageLoad(previous_normal, q).rg);
            vec4 prev_depth = imageLoad(previous_linear_depth, q);
            if (temporal_reprojection_is_valid(q, depth.x, prev_depth.x, normal, prev_normal, full_motion.z))
            {
                float w = weights[i] * max(0.0, dot(prev_normal, normal));
                float w_spec = w;

                prev_color += w * imageLoad(previous_color, q);
                prev_specular += w_spec * imageLoad(previous_specular, q);
                prev_moments += w * imageLoad(previous_moments, q).xyz;
                sum_w += w;
                sum_w_spec += w_spec;
            }
        }

        bool valid = sum_w > 1e-3;
        prev_color = valid ? prev_color / sum_w : vec4(0.0);
        prev_specular = sum_w_spec > 1e-3 ? prev_specular / sum_w_spec : vec4(0.0);
        prev_moments = valid ? prev_moments / sum_w : vec3(0.0);

        if (!valid)
        {
            // Temporal reprojection failed, desperately look for valid samples
            // in a larger 3x3 window
            float n_valid = 0.f;

            const int r = 1;
            for (int yy = -r; yy <= r; ++yy)
            for (int xx = -r; xx <= r; ++xx)
            {
                ivec3 q = ivec3(floor(motion.xy + vec2(0.5)) + ivec2(xx, yy), p.z);
                vec3 prev_normal = unpack_gbuffer_normal(imageLoad(previous_normal, q).rg);
                vec2 prev_depth = imageLoad(previous_linear_depth, q).rg;

                if (temporal_reprojection_is_valid(q, depth.x, prev_depth.x, normal, prev_normal, full_motion.z))
                {
                    prev_color += imageLoad(previous_color, q);
                    prev_specular += imageLoad(previous_specular, q);
                    prev_moments += imageLoad(previous_moments, q).xyz;
                    n_valid += 1.0;
                }
            }

            if (n_valid > 0.0)
            {
                valid = true;
                prev_color /= n_valid;
                prev_specular /= n_valid;
                prev_moments /= n_valid;
            }
        }

        float spec_alpha = 1.0;
        if (valid)
        {
            history_length = prev_moments.z;
        }
        else
        {
            prev_color = vec4(0.0);
            prev_specular = vec4(0.0);
            prev_moments = vec3(0.0);
            history_length = 0.0;
        }

        vec4 current_color = imageLoad(in_color, p);
        vec4 current_diffuse = imageLoad(in_diffuse, p);
        vec4 current_albedo = imageLoad(in_albedo, p);
        vec4 current_specular = max(vec4(0.0), current_color - current_diffuse * current_albedo);
        if (any(isnan(current_color))) current_color = vec4(0.0);
        if (any(isnan(current_diffuse))) current_diffuse = vec4(0.0);
        if (any(isnan(current_specular))) current_specular = vec4(0.0);

        history_length = min(256.0, valid ? history_length + 1.0f : 1.0f);

        const float color_alpha = control.temporal_alpha_color;
        const float moments_alpha = control.temporal_alpha_moments;
        float alpha = valid ? max(color_alpha, 1.0 / history_length) : 1.0;
        float alpha_moments = valid ? max(moments_alpha, 1.0 / history_length) : 1.0;

        vec2 moments;
        moments.x = rgb_to_luminance(current_diffuse.rgb);
        moments.y = moments.x * moments.x;
        moments = mix(prev_moments.xy, moments, alpha_moments);

        float variance = max(1e-8, moments.y - moments.x * moments.x);

        vec3 out_diff = mix(prev_color.rgb, current_diffuse.rgb, alpha);
        vec3 out_spec = mix(prev_specular.rgb, current_specular.rgb, alpha);

        imageStore(out_color, p, vec4(out_diff, variance));
        imageStore(out_specular, p, vec4(out_spec, variance));
        imageStore(out_moments, p, vec4(moments.xy, 1.0 / alpha, 0.0));
    }
}
