#version 460
#extension GL_GOOGLE_include_directive : enable
#include "svgf.glsl"
#include "projection.glsl"
#include "gbuffer.glsl"
#include "color.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, set = 0, rgba32f) uniform image2DArray diffuse_in;
layout(binding = 1, set = 0, rgba32f) uniform image2DArray diffuse_out;
layout(binding = 2, set = 0, rgba32f) uniform image2DArray diffuse_hist;
layout(binding = 3, set = 0, rgba32f) uniform image2DArray final_output;
layout(binding = 4, set = 0, rgba32f) uniform image2DArray in_linear_depth;
layout(binding = 5, set = 0, rgba32f) uniform image2DArray in_normal;
layout(binding = 6, set = 0, rgba32f) uniform image2DArray in_albedo;
layout(binding = 7, set = 0, rgba32f) uniform image2DArray specular_in;
layout(binding = 8, set = 0, rgba32f) uniform image2DArray specular_out;
layout(binding = 9, set = 0, rgba32f) uniform image2DArray spec_hist;
layout(binding = 10, set = 0, rgba32f) uniform image2DArray in_material;
layout(binding = 11, set = 0, rgba32f) uniform image2DArray in_moments;

float filter_variance(ivec3 p)
{
    float sum = 0.f;

    const int r = 1;
    for (int yy = -r; yy <= r; ++yy)
    for (int xx = -r; xx <= r; ++xx)
    {
        const ivec3 q = p + ivec3(xx, yy, 0.0);
        const float k = gaussian_kernel[abs(xx)][abs(yy)];
        float v = imageLoad(diffuse_in, q).a;
        sum += v * k;
    }

    return sum;
}

void main()
{
    const ivec3 p = ivec3(gl_GlobalInvocationID.xyz);
    if(all(lessThan(p.xy, control.size)))
    {
        const vec4 z_center = imageLoad(in_linear_depth, p);
        vec4 center_color = imageLoad(diffuse_in, p);
        vec4 center_specular = imageLoad(specular_in, p);

        if (any(isnan(z_center)))
        {
            imageStore(diffuse_out, p, center_color);
            imageStore(specular_out, p, center_specular);
            return;
        }

        const int step_size = int(1u << control.iteration);

        float center_luminance = rgb_to_luminance(center_color.rgb);

        const vec3 n_center = unpack_gbuffer_normal(imageLoad(in_normal, p).xy);
        const float roughness_center = imageLoad(in_material, p).y;

        const float var = filter_variance(p);

        const float phi_color = control.sigma_l *  sqrt(max(0.0, var)) + 1e-2;
        const vec2 depth_grad = z_center.yz;

        vec4 sum_color = center_color;
        vec4 sum_specular = center_specular;
        float sum_w = 1.0;
        float sum_w_spec = 1.0;

        const int r = control.atrous_kernel_radius;
        for (int yy = -r; yy <= r; ++yy)
        for (int xx = -r; xx <= r; ++xx)
        {
            const ivec3 q  = p + ivec3(xx, yy, 0) * step_size;

            if (all(lessThan(q.xy, control.size)) && all(greaterThanEqual(q.xy, ivec2(0))) && !(xx == 0 && yy == 0))
            {
                const vec4 color_q = imageLoad(diffuse_in, q);
                const vec4 spec_q = imageLoad(specular_in, q);
                const float lum_q = rgb_to_luminance(color_q.rgb);
                const float z_q = imageLoad(in_linear_depth, q).r;
                const vec3 n_q = unpack_gbuffer_normal(imageLoad(in_normal, q).rg);
                const float roughness_q = imageLoad(in_material, q).y;

                float w_n = pow(max(0.0, dot(n_q, n_center)), control.sigma_n);
                float w_z = abs(z_q - z_center.x) / (control.sigma_z * abs(dot(depth_grad, p.xy - q.xy)) + 1e-6);
                float w_l = abs(lum_q - center_luminance) / phi_color;
                float w = w_n * exp(-max(0.0, w_z) - max(0.0, w_l));

                float r_max = 0.1;
                float r_near = 0.01;
                float r_far = 0.1;
                float d_near = 10.0 * roughness_center;
                float d_far = 70.0 * roughness_center;
                float w_r = 1.0 - smoothstep(r_near, r_far, abs(roughness_q - roughness_center));
                float w_d = 1.0 - smoothstep(d_near, d_far, length(vec3(p - q)));

                float w_spec = exp(-max(0.0, w_z)) * w_n * w_r * w_d;
                sum_w += w;
                sum_color += color_q * vec4(vec3(w), w * w);
                if (control.iteration < control.spec_iteration_count)
                {
                    sum_w_spec += w_spec;
                    sum_specular += spec_q * vec4(vec3(w_spec), w_spec * w_spec);
                }
            }
        }

        vec4 filtered_color = sum_color / vec4(vec3(sum_w), sum_w * sum_w);
        vec4 filtered_spec = sum_specular / vec4(vec3(sum_w_spec), sum_w_spec * sum_w_spec);
        if (control.iteration == 0)
        {
            imageStore(diffuse_hist, p, center_color);
            imageStore(spec_hist, p, filtered_spec);
        }
        if (control.iteration == control.iteration_count - 1)
        {
            vec4 albedo = imageLoad(in_albedo, p);
            imageStore(final_output, p, vec4(center_color.rgb, 1.0));
        }
        else
        {
            imageStore(diffuse_out, p, center_color);
            imageStore(specular_out, p, filtered_spec);
        }
    }
}
