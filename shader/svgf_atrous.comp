#version 460
#extension GL_GOOGLE_include_directive : enable
#include "svgf.glsl"
#include "projection.glsl"
#include "gbuffer.glsl"
#include "color.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, set = 0, rgba32f) uniform image2DArray color_ping;
layout(binding = 1, set = 0, rgba32f) uniform image2DArray color_pong;
layout(binding = 2, set = 0, rgba32f) uniform image2DArray color_hist;
layout(binding = 3, set = 0, rgba32f) uniform image2DArray final_output;
layout(binding = 4, set = 0, rgba32f) uniform image2DArray in_linear_depth;
layout(binding = 5, set = 0, rgba32f) uniform image2DArray in_normal;
layout(binding = 6, set = 0, rgba32f) uniform image2DArray in_albedo;

layout(push_constant) uniform push_constant_buffer
{
    ivec2 size;
    int parity;
    int level;
    int stride;
    int iteration_count;
} control;

float filter_variance(ivec3 p)
{
    float sum = 0.f;

    const float kernel[2][2] = {
        {1.0 / 4.0, 1.0 / 8.0},
        {1.0 / 8.0, 1.0 / 16.0}
    };

    const int r = 1;
    for (int yy = -r; yy <= r; ++yy)
    for (int xx = -r; xx <= r; ++xx)
    {
        const ivec3 q = p + ivec3(xx, yy, 0.0);
        const float k = kernel[abs(xx)][abs(yy)];
        //const float k = 1.0;
        float v = (control.level & 1) == 0 ? imageLoad(color_ping, q).a : imageLoad(color_pong, q).a;
        sum += v * k;
    }

    return sum;
}

void main()
{
    const ivec3 p = ivec3(gl_GlobalInvocationID.xyz);
    if(all(lessThan(p.xy, control.size)))
    {
        vec4 center_color = (control.level & 1) == 0 ? imageLoad(color_ping, p) : imageLoad(color_pong, p);
        float center_luminance = rgb_to_luminance(center_color.rgb);
        // imageStore(final_output, p, vec4(center_color.rgb, 1.0));
        // imageStore(color_hist, p, vec4(center_color));
        // return;
        const float eps_variance = 1e-10;
        const float kernel_weights[3] = {1.0, 2.0/3.0, 1.0/6.0};

        const float var = filter_variance(p);

        const vec2 z_center = imageLoad(in_linear_depth, p).xy;

        const int step_size = int(1u << control.level);

        if (any(isnan(z_center)))
        {
            if ((control.level & 1) == 0) imageStore(color_pong, p, center_color);
            else                          imageStore(color_ping, p, center_color);
            return;
        }

        const vec3 n_center = unpack_gbuffer_normal(imageLoad(in_normal, p).xy);

        const float phi_color = 1.f *  sqrt(max(0.0, eps_variance + var));
        const float phi_depth = max(z_center.y, 1e-8) * step_size;

        vec4 sum_color = center_color;
        float sum_w = 1.0;

        const int r = 2;
        for (int yy = -r; yy <= r; ++yy)
        for (int xx = -r; xx <= r; ++xx)
        {
            const ivec3 q  = p + ivec3(xx, yy, 0) * step_size;
            const float kernel = kernel_weights[abs(xx)] * kernel_weights[abs(yy)];
            // float kernel = 1.0;

            if (all(lessThan(q.xy, control.size)) && all(greaterThanEqual(q.xy, ivec2(0))) && xx != 0 && yy != 0)
            {
                const vec4 color_q = (control.level & 1) == 0 ? imageLoad(color_ping, q) : imageLoad(color_ping, q);
                const float lum_q = rgb_to_luminance(color_q.rgb);
                const float z_q = imageLoad(in_linear_depth, q).r;
                const vec3 n_q = unpack_gbuffer_normal(imageLoad(in_normal, q).rg);

                const float w_n = pow(max(0.0, dot(n_q, n_center)), 32.0);
                const float w_z = (phi_depth == 0) ? 0.0f : abs(z_q - z_center.x) / phi_depth;
                const float w_l = abs(lum_q - center_luminance) / phi_color;

                const float w = exp(-max(w_l, 0.0) - max(w_z, 0.0)) * w_n * kernel;

                sum_w += w;
                sum_color += color_q * vec4(vec3(w), w * w);
            }
        }
    

        vec4 filtered_color = sum_color / vec4(vec3(sum_w), sum_w * sum_w);
        if (control.level == 0)
        {
            imageStore(color_hist, p, filtered_color);
        }

        if (control.level == control.iteration_count - 1)
        {
            // Remodulate and write output
            vec4 albedo = imageLoad(in_albedo, p);
            imageStore(final_output, p, vec4(filtered_color.rgb * albedo.rgb, 1.0));
            //imageStore(final_output, p, vec4(filtered_color.aaa, 1.0));
            //imageStore(final_output, p, vec4(center_color.rgb, 1.0));
            return;
        }
        else
        {
            if ((control.level & 1) == 0) imageStore(color_pong, p, filtered_color);
            else                          imageStore(color_ping, p, filtered_color);
        }
    }
}
