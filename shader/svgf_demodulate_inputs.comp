#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable

#include "svgf.glsl"
#include "gbuffer.glsl"
#include "random_sampler.glsl"
#include "math.glsl"

#include "scene.glsl"

layout(binding = 0, set = 0, rgba32f) uniform readonly image2DArray in_color;
layout(binding = 1, set = 0, rgba32f) uniform readonly image2DArray in_diffuse;
layout(binding = 2, set = 0, rgba32f) uniform readonly image2DArray in_specular;
layout(binding = 3, set = 0, rgba32f) uniform readonly image2DArray in_material;
layout(binding = 4, set = 0, rgba32f) uniform readonly image2DArray in_albedo;
layout(binding = 5, set = 0, rgba32f) uniform readonly image2DArray in_world_position;
layout(binding = 6, set = 0, rgba32f) uniform readonly image2DArray in_normal;
layout(binding = 7, set = 0, rgba32f) uniform image2DArray out_emissive;
layout(binding = 8, set = 0, rgba32f) uniform image2DArray out_diffuse;
layout(binding = 9, set = 0, rgba32f) uniform image2DArray out_specular;

layout (local_size_x = 16, local_size_y = 16) in;
void main()
{
    const ivec3 p = ivec3(gl_GlobalInvocationID.xyz);
    if (!is_in_screen(p.xy)) return;

    vec4 diffuse = imageLoad(in_diffuse, p);
    vec4 specular = imageLoad(in_specular, p);

    vec3 albedo = imageLoad(in_albedo, p).rgb;
    vec2 material = imageLoad(in_material, p).rg;
    float metallic = material.x;
    float roughness = material.y;
    vec3 remodulated = albedo.rgb * mix(diffuse.rgb, specular.rgb, metallic) + specular.rgb * (1.0 - metallic);

    vec3 remodulated_specular = albedo * metallic * specular.rgb + (1.0 - metallic) * specular.rgb;
    vec3 alternative = mix(vec3(1.0), albedo, metallic) * specular.rgb;

    vec3 color = imageLoad(in_color, p).rgb;
    vec3 emissive = max(color - remodulated, vec3(0.0));

    camera_pair cameras = camera.pairs[0];
    camera_data curr_camera = cameras.current;

    vec3 pos = imageLoad(in_world_position, p).xyz;
    if (!any(isnan(pos)))
    {
#if DEMODULATION_USE_SPLIT_SUM_APPROXIMATION == 1
        vec3 V = normalize(curr_camera.origin.xyz - pos);
        vec3 N = unpack_gbuffer_normal(imageLoad(in_normal, p).rg);
        float NoV = dot(N, V);
        vec3 f0 = mix(vec3(0.04), albedo, metallic);
        //vec3 specular_reflectance = specularGGXReflectanceApprox(f0, roughness, NoV);
        vec3 specular_reflectance = environment_term_rtg(f0, NoV, roughness);
        specular_reflectance = max(specular_reflectance, vec3(1e-4));   
        specular.rgb = remodulated_specular / specular_reflectance;
#endif
    }

    imageStore(out_diffuse, p, diffuse);
    imageStore(out_specular, p, vec4(specular.rgb, specular.a));
    imageStore(out_emissive, p, vec4(emissive, 1.0));
}