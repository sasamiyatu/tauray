
#version 460
#extension GL_GOOGLE_include_directive : enable
#include "svgf.glsl"
#include "projection.glsl"
#include "gbuffer.glsl"
#include "color.glsl"

layout(binding = 0, set = 0, rgba32f) uniform readonly image2DArray in_diffuse;
layout(binding = 1, set = 0, rgba32f) uniform image2DArray out_diffuse;
layout(binding = 2, set = 0, rgba32f) uniform readonly image2DArray in_linear_depth;
layout(binding = 3, set = 0, rgba32f) uniform readonly image2DArray current_moments;
layout(binding = 4, set = 0, rgba32f) uniform image2DArray moments_hist;
layout(binding = 5, set = 0, rgba32f) uniform readonly image2DArray in_normal;
layout(binding = 6, set = 0, rgba32f) uniform readonly image2DArray in_specular;
layout(binding = 7, set = 0, rgba32f) uniform image2DArray out_specular;

layout (local_size_x = 16, local_size_y = 16) in;

void main()
{
    const ivec3 p = ivec3(gl_GlobalInvocationID.xyz);
    if(all(lessThan(p.xy, control.size)))
    {
        vec3 moments = imageLoad(current_moments, p).rgb;
        float hist_len = moments.z;
        vec4 c_center = imageLoad(in_diffuse, p);
        vec4 spec_center = imageLoad(in_specular, p);
        if (false && hist_len < 4.0)
        {
            float sum_w = 0.0;
            vec3 sum_diffuse = vec3(0.0);
            vec2 sum_moments = vec2(0.0);
            vec3 sum_specular = vec3(0.0);
            float lum_center = rgb_to_luminance(c_center.rgb);

            vec4 z_center = imageLoad(in_linear_depth, p);
            const vec2 depth_grad = z_center.yz;

            if (any(isnan(z_center)))
            {
                imageStore(out_diffuse, p, c_center);
                imageStore(out_specular, p, spec_center);
                return;
            }

            vec3 normal_center = unpack_gbuffer_normal(imageLoad(in_normal, p).rg);

            const int r = 3;
            for (int yy = -r; yy <= r; ++yy)
            for (int xx = -r; xx <= r; ++xx)
            {
                ivec3 q = ivec3(p.xy + ivec2(xx, yy), p.z);
                if (all(lessThan(q.xy, control.size)) && all(greaterThanEqual(q.xy, ivec2(0))))
                {
                    vec3 q_diffuse = imageLoad(in_diffuse, q).rgb;
                    vec3 q_specular = imageLoad(in_specular, q).rgb;
                    vec2 q_moments = imageLoad(current_moments, q).rg;
                    float q_lum = rgb_to_luminance(q_diffuse);
                    float q_z = imageLoad(in_linear_depth, q).r;
                    vec3 q_n = unpack_gbuffer_normal(imageLoad(in_normal, q).rg);

                    float w_n = pow(max(0.0, dot(q_n, normal_center)), control.sigma_n);
                    float w_z = abs(q_z - z_center.x) / (control.sigma_z * abs(dot(depth_grad, p.xy - q.xy)) + 1e-6);
                    float w_l = abs(q_lum - lum_center) / control.sigma_l;

                    float w = exp(-max(0.0, w_l) - max(0.0, w_z)) * w_n;

                    sum_w += w;
                    sum_diffuse += q_diffuse * w;
                    sum_specular += q_specular * w;
                    sum_moments += q_moments * w;
                }
            }

            sum_w = max(sum_w, 1e-6f);
            sum_diffuse /= sum_w;
            sum_specular /= sum_w;
            sum_moments /= sum_w;

            float variance = max(1e-8, sum_moments.y - sum_moments.x * sum_moments.x);
            variance *= 4.0 / hist_len;

            imageStore(out_diffuse, p, vec4(sum_diffuse.rgb, variance));
            imageStore(out_specular, p, vec4(sum_specular, variance));
        }
        else
        {
            imageStore(out_diffuse, p, vec4(c_center));
            imageStore(out_specular, p, vec4(spec_center));
        }


        imageStore(moments_hist, p, vec4(moments, 0.0));
    }
}